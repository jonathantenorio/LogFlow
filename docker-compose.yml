version: '3.8'

services:
  # Banco de dados PostgreSQL
  db:
    image: postgres:15
    container_name: logflow_db
    environment:
      POSTGRES_DB: logflow
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - logflow_network
    restart: unless-stopped

  # Redis para cache e filas
  redis:
    image: redis:7-alpine
    container_name: logflow_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - logflow_network
    restart: unless-stopped

  # Backend Django
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: logflow_backend
    environment:
      - DEBUG=True
      - DB_HOST=db
      - DB_NAME=logflow
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=django-insecure-change-me-in-production
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
    volumes:
      - ./backend:/app
      - media_files:/app/media
      - static_files:/app/staticfiles
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    networks:
      - logflow_network
    restart: unless-stopped
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn logflow.wsgi:application --bind 0.0.0.0:8000 --workers 3"

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: logflow_celery_worker
    environment:
      - DEBUG=True
      - DB_HOST=db
      - DB_NAME=logflow
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=django-insecure-change-me-in-production
    volumes:
      - ./backend:/app
      - media_files:/app/media
    depends_on:
      - db
      - redis
    networks:
      - logflow_network
    restart: unless-stopped
    command: celery -A logflow worker -l info

  # Celery Beat (agendador)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: logflow_celery_beat
    environment:
      - DEBUG=True
      - DB_HOST=db
      - DB_NAME=logflow
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=django-insecure-change-me-in-production
    volumes:
      - ./backend:/app
      - media_files:/app/media
    depends_on:
      - db
      - redis
    networks:
      - logflow_network
    restart: unless-stopped
    command: celery -A logflow beat -l info

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: logflow_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
      - REACT_APP_WS_URL=ws://localhost:8000/ws
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - logflow_network
    restart: unless-stopped
    command: npm start

  # Nginx (proxy reverso)
  nginx:
    image: nginx:alpine
    container_name: logflow_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - static_files:/var/www/static
      - media_files:/var/www/media
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - logflow_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  media_files:
  static_files:

networks:
  logflow_network:
    driver: bridge
